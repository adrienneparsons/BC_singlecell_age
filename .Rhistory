orig.reduction = "pca",
new.reduction = "integrated.cca", verbose = FALSE)
# Re-join layers after integration
seu_def[["RNA"]] <- JoinLayers(seu_def[["RNA"]])
seu_def <- FindNeighbors(seu_def, reduction = "integrated.cca", dims = 1:30)
seu_def <- FindClusters(seu_def, resolution = 1)
seu_def <- RunUMAP(seu_def, dims = 1:30, reduction = "integrated.cca")
# Visualization
DimPlot(seu_def, reduction = "umap", group.by = c("orig.ident"))
DimPlot(seu_def, reduction = "umap", group.by = c("celltype_major"))
DimPlot(seu_def, reduction = "umap", group.by = c("celltype_minor"))
DimPlot(seu_def, reduction = "umap", group.by = c("celltype_subset"))
DimPlot(seu_def, reduction = "umap", split.by = "orig.ident")
# Add patients' age to the object
agedb <- read.xlsx2("C:/Users/18458505Q/Desktop/HTVC Esther/BWH/wu,swarbrick2021 - Supplement.xlsx", sheetIndex = 1, startRow = 4)
agedb <- agedb[agedb$Subtype.by.IHC == "ER+"|agedb$Subtype.by.IHC == "TNBC",]
head(agedb)
agedb <- agedb[,c(1,3)]
agedb$Case.ID <- str_sub(agedb$Case.ID,1,4)
colnames(agedb) <- c("ID","age")
agedb
seu_def[["ID"]] <- str_sub(seu_def$orig.ident,4,7)
seu_def[["age"]] <- merge(seu_def@meta.data,agedb,by="ID")
seu_def[["ID"]] <- NULL
# Subset ER+ & TNBC in two objects
seu_def_er <- subset(seu_def, subset = subtype == "ER")
seu_def_tnbc <- subset(seu_def, subset = subtype == "TNBC")
# Subset old & young within each subtype
summary(as.numeric(seu_def_er$age)) # median 55
summary(as.numeric(seu_def_tnbc$age)) # median 54
groupageER <- c()
for (i in 1:length(seu_def_er$age)){
if(seu_def_er$age[i] <= 55){
groupageER <- c(groupageER,"young")
} else {
groupageER <- c(groupageER, "old")
}
}
seu_def_er$groupage <- groupageER
groupageTN <- c()
for (i in 1:length(seu_def_tnbc$age)){
if(seu_def_tnbc$age[i] <= 55){
groupageTN <- c(groupageTN,"young")
} else {
groupageTN <- c(groupageTN, "old")
}
}
seu_def_tnbc$groupage <- groupageTN
seu_def_tnbc_old <- subset(seu_def_tnbc, subset = groupage == "old")
seu_def_tnbc_young <- subset(seu_def_tnbc, subset = groupage == "young")
seu_def_er_old <- subset(seu_def_er, subset = groupage == "old")
seu_def_er_young <- subset(seu_def_er, subset = groupage == "young")
# Load the Seurat objects
seu_def_er <- readRDS("C:/Users/18458505Q/Desktop/HTVC Esther/BWH/RData/seurat_CCA_integrated_defER_subset.Rdata")
seu_def_er_old <- readRDS("C:/Users/18458505Q/Desktop/HTVC Esther/BWH/RData/seurat_CCA_integrated_defERold_subset.Rdata")
seu_def_er_young <- readRDS("C:/Users/18458505Q/Desktop/HTVC Esther/BWH/RData/seurat_CCA_integrated_defERyoung_subset.Rdata")
seu_def_tnbc <- readRDS("C:/Users/18458505Q/Desktop/HTVC Esther/BWH/RData/seurat_CCA_integrated_defTNBC_subset.Rdata")
seu_def_tnbc_old <- readRDS("C:/Users/18458505Q/Desktop/HTVC Esther/BWH/RData/seurat_CCA_integrated_defTNBCold_subset.Rdata")
seu_def_tnbc_young <- readRDS("C:/Users/18458505Q/Desktop/HTVC Esther/BWH/RData/seurat_CCA_integrated_defTNBCyoung_subset.Rdata")
# Create CellChat objects
# Define group.by
# celltype_minor or celltype_major
cellgroup = "celltype_minor"
cellchatER <- createCellChat(object = seu_def_er, group.by = cellgroup, assay = "RNA")
cellchatER.old <- createCellChat(object = seu_def_er_old, group.by = cellgroup, assay = "RNA")
cellchatER.young <- createCellChat(object = seu_def_er_young, group.by = cellgroup, assay = "RNA")
cellchatTN <- createCellChat(object = seu_def_tnbc, group.by = cellgroup, assay = "RNA")
cellchatTN.old <- createCellChat(object = seu_def_tnbc_old, group.by = cellgroup, assay = "RNA")
cellchatTN.young <- createCellChat(object = seu_def_tnbc_young, group.by = cellgroup, assay = "RNA")
# Set the ligand-receptor interaction database
CellChatDB <- CellChatDB.human
# Set the used database in the object
cellchatER@DB <- CellChatDB
cellchatER.old@DB <- CellChatDB
cellchatER.young@DB <- CellChatDB
cellchatTN@DB <- CellChatDB
cellchatTN.old@DB <- CellChatDB
cellchatTN.young@DB <- CellChatDB
# Create a list with all the cellchat objects
cc.list <- list(ER = cellchatER, ER.old = cellchatER.old,
ER.young = cellchatER.young, TN = cellchatTN,
TN.young = cellchatTN.young, TN.old = cellchatTN.old)
# Subset the expression data of signaling genes for saving computation cost
cc.list <- lapply(cc.list, function(x) subsetData(x))
future::plan("multisession", workers = 4) # do parallel
# Part II: Inference of cell-cell communication network
# Compute the communication probability and infer cellular communication network
cc.list <- lapply(cc.list, function(x) identifyOverExpressedGenes(x))
cc.list <- lapply(cc.list, function(x) identifyOverExpressedInteractions(x))
# Define population size
# TRUE for unsorted single-cell transcriptomics or FALSE for sorted-enriched single cells
psize = TRUE
options(future.globals.maxSize = 600 * 1024^2) # default: 500 * 1024^2 = 500 MiB
cc.list <- lapply(cc.list, function(x) computeCommunProb(x, population.size = psize))
# Load the required libraries
library(CellChat)
library(patchwork)
library(RColorBrewer)
library(ComplexHeatmap)
#--------------------------------------------------------------------------------------------------------------------------------
# TNBC
# Change directory!!
cellchatTNBC.young <- readRDS("C:/Users/18458505Q/Desktop/HTVC Esther/BWH/cellchatTN.young_computeCommunProb_psize_TRUE_celltype_major.Rdata")
cellchatTNBC.old <- readRDS("C:/Users/18458505Q/Desktop/HTVC Esther/BWH/cellchatTN.old_computeCommunProb_psize_TRUE_celltype_major.Rdata")
object.list <- list(TNBC.young = cellchatTNBC.young, TNBC.old = cellchatTNBC.old)
# Check min.cells
lapply(object.list, function(x) summary(x@idents))
path <- "C:/Users/18458505Q/Desktop/HTVC Esther/BWH"
agedb <- read.xlsx2(paste0(path,"/wu,swarbrick2021 - Supplement.xlsx"), sheetIndex = 1, startRow = 4)
library(xlsx)
agedb <- read.xlsx2(paste0(path,"/wu,swarbrick2021 - Supplement.xlsx"), sheetIndex = 1, startRow = 4)
head(agedb)
x=cell.chat
x <- "cell.chat"
getwd()
results_path <- "C:/Users/18458505Q/Desktop"
paste0(results_path,x)
paste0(results_path,"/",x)
?saveRDS
# Prerequisite packages
library(ggplot2)
library(forcats)
library(edgeR)
library(limma)
library(Biobase)
library(fgsea)
library(ggpubr)
library(dplyr)
library(ggrepel)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("edgeR")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("limma")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("limma")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("limma")
# Prerequisite packages
library(ggplot2)
library(forcats)
library(edgeR)
library(limma)
library(Biobase)
library(fgsea)
library(ggpubr)
library(dplyr)
library(ggrepel)
# First, load in the METABRIC clinical data and format, downloaded from cBioPortal: https://www.cbioportal.org/study/summary?id=brca_metabric
clin_metabric <- read.table("C:/Users/18458505Q/Downloads/brca_tcga_pan_can_atlas_2018_clinical_data.tsv",
sep = "\t")
head(clin_metabric)
# First, load in the METABRIC clinical data and format, downloaded from cBioPortal: https://www.cbioportal.org/study/summary?id=brca_metabric
clin_metabric <- read.table("C:/Users/18458505Q/Downloads/brca_tcga_pan_can_atlas_2018_clinical_data.tsv",
sep = "\t",row.names = [,1])
# First, load in the METABRIC clinical data and format, downloaded from cBioPortal: https://www.cbioportal.org/study/summary?id=brca_metabric
clin_metabric <- read.table("C:/Users/18458505Q/Downloads/brca_tcga_pan_can_atlas_2018_clinical_data.tsv",
sep = "\t",row.names = [1,])
?read.table
clin_metabric[1,]
# First, load in the METABRIC clinical data and format, downloaded from cBioPortal: https://www.cbioportal.org/study/summary?id=brca_metabric
clin_metabric <- read.table("C:/Users/18458505Q/Downloads/brca_tcga_pan_can_atlas_2018_clinical_data.tsv",
)
# First, load in the METABRIC clinical data and format, downloaded from cBioPortal: https://www.cbioportal.org/study/summary?id=brca_metabric
clin_metabric <- read.table("C:/Users/18458505Q/Downloads/brca_tcga_pan_can_atlas_2018_clinical_data.tsv",
sep = "\t",row.names = clin_metabric[1,])
# First, load in the METABRIC clinical data and format, downloaded from cBioPortal: https://www.cbioportal.org/study/summary?id=brca_metabric
clin_metabric <- read.table("C:/Users/18458505Q/Downloads/brca_tcga_pan_can_atlas_2018_clinical_data.tsv",
sep = "\t")
# First, load in the METABRIC clinical data and format, downloaded from cBioPortal: https://www.cbioportal.org/study/summary?id=brca_metabric
clin_metabric <- read.table("C:/Users/18458505Q/Downloads/brca_tcga_pan_can_atlas_2018_clinical_data.tsv",
sep = "\t", row.names=1)
# First, load in the METABRIC clinical data and format, downloaded from cBioPortal: https://www.cbioportal.org/study/summary?id=brca_metabric
clin_metabric <- read.table("C:/Users/18458505Q/Downloads/brca_tcga_pan_can_atlas_2018_clinical_data.tsv",
sep = "\t", row.names=1, check.names = TRUE)
# First, load in the METABRIC clinical data and format, downloaded from cBioPortal: https://www.cbioportal.org/study/summary?id=brca_metabric
clin_metabric <- read.table("C:/Users/18458505Q/Downloads/brca_tcga_pan_can_atlas_2018_clinical_data.tsv",
sep = "\t", row.names=1, check.names = FALSE)
# First, load in the METABRIC clinical data and format, downloaded from cBioPortal: https://www.cbioportal.org/study/summary?id=brca_metabric
clin_metabric <- read.table("C:/Users/18458505Q/Downloads/brca_tcga_pan_can_atlas_2018_clinical_data.tsv",
sep = "\t")
colnames(clin_metabric) <- clin_metabric[1,]
clin_metabric <- clin_metabric[-1,]
# First, load in the METABRIC clinical data and format, downloaded from cBioPortal: https://www.cbioportal.org/study/summary?id=brca_metabric
clin_metabric <- read.table("C:/Users/18458505Q/Downloads/brca_tcga_pan_can_atlas_2018_clinical_data.tsv",
sep = "\t")
head(clin_metabric)
colnames(clin_metabric) <- clin_metabric[1,]
head(clin_metabric)
clin_metabric <- clin_metabric[-1,]
# First, load in the METABRIC clinical data and format, downloaded from cBioPortal: https://www.cbioportal.org/study/summary?id=brca_metabric
clin_metabric <- read.table("C:/Users/18458505Q/Downloads/brca_tcga_pan_can_atlas_2018_clinical_data.tsv",
sep = "\t")
colnames(clin_metabric) <- clin_metabric[1,]
clin_metabric <- clin_metabric[-1,]
colnames(clin_metabric)
clin_metabric$Subtype
summary(as.factor(clin_metabric$Subtype))
library(readxl)
read_excel("/Users/addie/Downloads/TCGA/mmc4.xlsx")
data <- read_excel("/Users/addie/Downloads/TCGA/mmc4.xlsx")
View(data)
data <- read_excel("/Users/addie/Downloads/TCGA/mmc4.xlsx", skip =1)
View(data)
View(data)
data$BRCA_Pathology %>% table()
library(tidyr)
data$BRCA_Pathology %>% table()
data$BRCA_Subtype_PAM50 %>% table()
data$CESC_Pathology %>% table()
data$OV_Subtype %>% table()
data$UCS_Histology %>% table()
data$UCEC_Histology %>% table()
data$MSI_status %>% table()
library(dplyr)
library(ggplot2)
# Load the results
clin <- read.csv("</Users/addie/Partners HealthCare Dropbox/Adrienne Parsons/Single-cell_breast_cancer/BC_Aging_Paper/2 Revision/Figures/Figure 5 - Cell Interactions Resubmission/Hanyun's TMA mIF analysis/data/clinical_df_merge_age.csv")
# Load the results
clin <- read.csv("/Users/addie/Partners HealthCare Dropbox/Adrienne Parsons/Single-cell_breast_cancer/BC_Aging_Paper/2 Revision/Figures/Figure 5 - Cell Interactions Resubmission/Hanyun's TMA mIF analysis/data/clinical_df_merge_age.csv")
dist <- read.csv("/Users/addie/Partners HealthCare Dropbox/Adrienne Parsons/Single-cell_breast_cancer/BC_Aging_Paper/2 Revision/Figures/Figure 5 - Cell Interactions Resubmission/Hanyun's TMA mIF analysis/data/distance_trait.csv")
ratio <- read.csv("/Users/addie/Partners HealthCare Dropbox/Adrienne Parsons/Single-cell_breast_cancer/BC_Aging_Paper/2 Revision/Figures/Figure 5 - Cell Interactions Resubmission/Hanyun's TMA mIF analysis/results-2/output/stats/tumour_stromal_ratio.csv")
clin$Patient.ID %in% dist$Patient.ID %>% table()
clin$Patient.ID %in% ratio$X %>% table()
# Add patient age and molecular subtype to the data
dist$Age <- NA
dist$subtype <- NA
ratio$Age <- NA
ratio$subtype <- NA
for(id in clin$Patient.ID){
dist$Age[dist$Patient.ID == id] <- clin$Age[clin$Patient.ID == id]
dist$subtype[dist$Patient.ID == id] <- clin$subtype[clin$Patient.ID == id]
ratio$Age[dist$Patient.ID == id] <- clin$Age[clin$Patient.ID == id]
ratio$subtype[dist$Patient.ID == id] <- clin$subtype[clin$Patient.ID == id]
}
# Check for any NA values
is.na(dist$Age) %>% table()
is.na(dist$subtype) %>% table()
is.na(ratio$Age) %>% table()
is.na(ratio$subtype) %>% table()
# Check the subtype names (should be "TNBC" and "ER+)
unique(dist$subtype)
# Subset the results to be TNBC or ER+ alone
TNBC_dist <- dist[dist$subtype == "TNBC",]
ER_dist <- dist[dist$subtype == "ER+",]
TNBC_ratio <- ratio[ratio$subtype == "TNBC",]
ER_ratio <- ratio[ratio$subtype == "ER+",]
group1 <- clin$Patient.ID[clin$Age <= 55]
group2 <- clin$Patient.ID[clin$Age > 55]
group3 <- clin$Patient.ID[clin$Age >55 & clin$Age < 75]
group4 <- clin$Patient.ID[clin$Age <= 45]
group5 <- clin$Patient.ID[clin$Age >=65]
group6 <- clin$Patient.ID[clin$Age > 65 & clin$Age < 75]
# Identify which groups are young and which are old; in this case we just want to compare
# Young to Old with a threshold of 55, so we are comparing Group 1 to Group 2
young_groupings <- list("Group1" = group1)
old_groupings <- list("Group2" = group2)
# For the old groupings and the young groupings:
for(old in names(old_groupings)){
for(young in names(young_groupings)){
# Initialize a data frame with the comparison made, means and medians and the p-value
df <- data.frame("comp" = character(0), "mean_old" = numeric(0), "median_old" = numeric(0),
"mean_young" = numeric(0), "median_young" = numeric(0), "pval" = numeric(0)
)
# Get the patients for the comparison being made
olds <- na.omit(unlist(old_groupings[old]))
youngs <- na.omit(unlist(young_groupings[young]))
# Subset the data to just be the patients to be compared
TNBC <- TNBC_dist[TNBC_dist$Patient.ID %in% c(olds, youngs),]
# Add an annotation if the patient is Young or Old
TNBC$Group <- NA
TNBC$Group[TNBC$Patient.ID %in% olds] <- "Older"
TNBC$Group[TNBC$Patient.ID %in% youngs] <- "Young"
# For each metric to analyze:
for(metric in dist_metrics){
# Plot the metric valuues per patient by age group in a bix plot
p <- ggplot(TNBC, aes(x = Group, y = .data[[metric]], fill = Group))+geom_boxplot()+
geom_jitter()+
ylab(metric)+
theme(aspect.ratio = 1)+
theme_minimal()
# Save
#ggsave(filename = paste0(old, " vs. ", young, " ", metric, ".pdf"), p, device = "pdf")
# Get a list of the values for the metric of interest for each age group
o <- na.omit(TNBC[[metric]][TNBC$Patient.ID %in% olds])
y <- na.omit(TNBC[[metric]][TNBC$Patient.ID %in% youngs])
# Wilcox test for significance
t <- wilcox.test(o, y)
# Get the results and add to the blank data frame
ls <- list("comp" = metric, "mean_old" = mean(o), "median_old" = median(o), "mean_young" =
mean(y), "median_young" = median(y), "pval" = t$p.value)
df <- rbind(df, ls)
}
# Save the complete statistics
assign("TNBC_distmetrics", df)
}
}
# Metrics in the distance data frame we want to compare
dist_metrics <- c("endothelial_c_general_icaf_mycaf_Reference_perc_r30",
"general_icaf_mycaf_endothelial_c_Reference_perc_r30",
"endothelial_c_general_CTL_Reference_perc_r30",
"general_CTL_endothelial_c_Reference_perc_r30",
"general_CTL_general_icaf_mycaf_Reference_perc_r30",
"general_CTL_icaf_Reference_perc_r30",
"general_CTL_myCAF_Reference_perc_r30",
"general_icaf_mycaf_general_CTL_Reference_perc_r30",
"icaf_general_CTL_Reference_perc_r30",
"mycaf_general_CTL_Reference_perc_r30",
"general_CTL_epithelial_Reference_perc_r30",
"endothelial_c_epithelial_Reference_perc_r30")
# Metrics in the ratio data we want to compare
ratio_metrics <- c("cd8_t_general_tumour_perc", "cd8_t_general_stroma_perc", "endothelial_c_tumour_perc",
"endothelial_c_stroma_perc")
# For the old groupings and the young groupings:
for(old in names(old_groupings)){
for(young in names(young_groupings)){
# Initialize a data frame with the comparison made, means and medians and the p-value
df <- data.frame("comp" = character(0), "mean_old" = numeric(0), "median_old" = numeric(0),
"mean_young" = numeric(0), "median_young" = numeric(0), "pval" = numeric(0)
)
# Get the patients for the comparison being made
olds <- na.omit(unlist(old_groupings[old]))
youngs <- na.omit(unlist(young_groupings[young]))
# Subset the data to just be the patients to be compared
TNBC <- TNBC_dist[TNBC_dist$Patient.ID %in% c(olds, youngs),]
# Add an annotation if the patient is Young or Old
TNBC$Group <- NA
TNBC$Group[TNBC$Patient.ID %in% olds] <- "Older"
TNBC$Group[TNBC$Patient.ID %in% youngs] <- "Young"
# For each metric to analyze:
for(metric in dist_metrics){
# Plot the metric valuues per patient by age group in a bix plot
p <- ggplot(TNBC, aes(x = Group, y = .data[[metric]], fill = Group))+geom_boxplot()+
geom_jitter()+
ylab(metric)+
theme(aspect.ratio = 1)+
theme_minimal()
# Save
#ggsave(filename = paste0(old, " vs. ", young, " ", metric, ".pdf"), p, device = "pdf")
# Get a list of the values for the metric of interest for each age group
o <- na.omit(TNBC[[metric]][TNBC$Patient.ID %in% olds])
y <- na.omit(TNBC[[metric]][TNBC$Patient.ID %in% youngs])
# Wilcox test for significance
t <- wilcox.test(o, y)
# Get the results and add to the blank data frame
ls <- list("comp" = metric, "mean_old" = mean(o), "median_old" = median(o), "mean_young" =
mean(y), "median_young" = median(y), "pval" = t$p.value)
df <- rbind(df, ls)
}
# Save the complete statistics
assign("TNBC_distmetrics", df)
}
}
# Subset the data to just be the patients to be compared
TNBC <- TNBC_dist[TNBC_dist$Patient.ID %in% c(olds, youngs),]
# Add an annotation if the patient is Young or Old
TNBC$Group <- NA
TNBC$Group[TNBC$Patient.ID %in% olds] <- "Older"
TNBC$Group[TNBC$Patient.ID %in% youngs] <- "Young"
# Get a list of the values for the metric of interest for each age group
o <- na.omit(TNBC[[metric]][TNBC$Patient.ID %in% olds])
y <- na.omit(TNBC[[metric]][TNBC$Patient.ID %in% youngs])
# Wilcox test for significance
t <- wilcox.test(o, y)
View(TNBC)
TNBC[[metric]][TNBC$Patient.ID %in% olds]
View(TNBC)
TNBC[[metric]]
# Metrics in the distance data frame we want to compare
dist_metrics <- c("endothelial_c_general_icaf_mycaf_Reference_perc_r30",
i
# Metrics in the distance data frame we want to compare
dist_metrics <- c("endothelial_c_general_icaf_mycaf_Reference_perc_r30",
#"general_icaf_mycaf_endothelial_c_Reference_perc_r30",
#"endothelial_c_general_CTL_Reference_perc_r30",
#"general_CTL_endothelial_c_Reference_perc_r30",
"general_CTL_general_icaf_mycaf_Reference_perc_r30",
#"general_CTL_icaf_Reference_perc_r30",
#"general_CTL_myCAF_Reference_perc_r30",
#"general_icaf_mycaf_general_CTL_Reference_perc_r30",
#"icaf_general_CTL_Reference_perc_r30",
#"mycaf_general_CTL_Reference_perc_r30",
"general_CTL_epithelial_Reference_perc_r30")
# Subset the data to just be the patients to be compared
TNBC <- TNBC_dist[TNBC_dist$Patient.ID %in% c(olds, youngs),]
# Add an annotation if the patient is Young or Old
TNBC$Group <- NA
TNBC$Group[TNBC$Patient.ID %in% olds] <- "Older"
TNBC$Group[TNBC$Patient.ID %in% youngs] <- "Young"
View(TNBC)
# For each metric to analyze:
for(metric in dist_metrics){
# Plot the metric valuues per patient by age group in a bix plot
p <- ggplot(TNBC, aes(x = Group, y = .data[[metric]], fill = Group))+geom_boxplot()+
geom_jitter()+
ylab(metric)+
theme(aspect.ratio = 1)+
theme_minimal()
# Save
#ggsave(filename = paste0(old, " vs. ", young, " ", metric, ".pdf"), p, device = "pdf")
# Get a list of the values for the metric of interest for each age group
o <- na.omit(TNBC[[metric]][TNBC$Patient.ID %in% olds])
y <- na.omit(TNBC[[metric]][TNBC$Patient.ID %in% youngs])
# Wilcox test for significance
t <- wilcox.test(o, y)
# Get the results and add to the blank data frame
ls <- list("comp" = metric, "mean_old" = mean(o), "median_old" = median(o), "mean_young" =
mean(y), "median_young" = median(y), "pval" = t$p.value)
df <- rbind(df, ls)
}
metric
View(dist)
dist <- read.csv("/Users/addie/Downloads/share/data/distance_trait.csv")
View(dist)
# Check that all patients in the clinical data are represented in the distance and ratio results
clin$Patient.ID %in% dist$Patient.ID %>% table()
clin$Patient.ID %in% ratio$X %>% table()
# Add patient age and molecular subtype to the data
dist$Age <- NA
dist$subtype <- NA
ratio$Age <- NA
ratio$subtype <- NA
for(id in clin$Patient.ID){
dist$Age[dist$Patient.ID == id] <- clin$Age[clin$Patient.ID == id]
dist$subtype[dist$Patient.ID == id] <- clin$subtype[clin$Patient.ID == id]
ratio$Age[dist$Patient.ID == id] <- clin$Age[clin$Patient.ID == id]
ratio$subtype[dist$Patient.ID == id] <- clin$subtype[clin$Patient.ID == id]
}
# Check for any NA values
is.na(dist$Age) %>% table()
is.na(dist$subtype) %>% table()
is.na(ratio$Age) %>% table()
is.na(ratio$subtype) %>% table()
# Check the subtype names (should be "TNBC" and "ER+)
unique(dist$subtype)
# Subset the results to be TNBC or ER+ alone
TNBC_dist <- dist[dist$subtype == "TNBC",]
ER_dist <- dist[dist$subtype == "ER+",]
TNBC_ratio <- ratio[ratio$subtype == "TNBC",]
ER_ratio <- ratio[ratio$subtype == "ER+",]
# Different age groups for comparison:
# Make lists of donor IDs that fall into different young and old categories
group1 <- clin$Patient.ID[clin$Age <= 55]
group2 <- clin$Patient.ID[clin$Age > 55]
group3 <- clin$Patient.ID[clin$Age >55 & clin$Age < 75]
group4 <- clin$Patient.ID[clin$Age <= 45]
group5 <- clin$Patient.ID[clin$Age >=65]
group6 <- clin$Patient.ID[clin$Age > 65 & clin$Age < 75]
# Identify which groups are young and which are old; in this case we just want to compare
# Young to Old with a threshold of 55, so we are comparing Group 1 to Group 2
young_groupings <- list("Group1" = group1)
old_groupings <- list("Group2" = group2)
# Metrics in the distance data frame we want to compare
dist_metrics <- c("endothelial_c_general_icaf_mycaf_Reference_perc_r30",
"general_icaf_mycaf_endothelial_c_Reference_perc_r30",
"endothelial_c_general_CTL_Reference_perc_r30",
"general_CTL_endothelial_c_Reference_perc_r30",
"general_CTL_general_icaf_mycaf_Reference_perc_r30",
"general_CTL_icaf_Reference_perc_r30",
"general_CTL_myCAF_Reference_perc_r30",
"general_icaf_mycaf_general_CTL_Reference_perc_r30",
"icaf_general_CTL_Reference_perc_r30",
"mycaf_general_CTL_Reference_perc_r30",
"general_CTL_epithelial_Reference_perc_r30",
"endothelial_c_epithelial_Reference_perc_r30")
# Metrics in the ratio data we want to compare
ratio_metrics <- c("cd8_t_general_tumour_perc", "cd8_t_general_stroma_perc", "endothelial_c_tumour_perc",
"endothelial_c_stroma_perc")
# For the old groupings and the young groupings:
for(old in names(old_groupings)){
for(young in names(young_groupings)){
# Initialize a data frame with the comparison made, means and medians and the p-value
df <- data.frame("comp" = character(0), "mean_old" = numeric(0), "median_old" = numeric(0),
"mean_young" = numeric(0), "median_young" = numeric(0), "pval" = numeric(0)
)
# Get the patients for the comparison being made
olds <- na.omit(unlist(old_groupings[old]))
youngs <- na.omit(unlist(young_groupings[young]))
# Subset the data to just be the patients to be compared
TNBC <- TNBC_dist[TNBC_dist$Patient.ID %in% c(olds, youngs),]
# Add an annotation if the patient is Young or Old
TNBC$Group <- NA
TNBC$Group[TNBC$Patient.ID %in% olds] <- "Older"
TNBC$Group[TNBC$Patient.ID %in% youngs] <- "Young"
# For each metric to analyze:
for(metric in dist_metrics){
# Plot the metric valuues per patient by age group in a bix plot
p <- ggplot(TNBC, aes(x = Group, y = .data[[metric]], fill = Group))+geom_boxplot()+
geom_jitter()+
ylab(metric)+
theme(aspect.ratio = 1)+
theme_minimal()
# Save
#ggsave(filename = paste0(old, " vs. ", young, " ", metric, ".pdf"), p, device = "pdf")
# Get a list of the values for the metric of interest for each age group
o <- na.omit(TNBC[[metric]][TNBC$Patient.ID %in% olds])
y <- na.omit(TNBC[[metric]][TNBC$Patient.ID %in% youngs])
# Wilcox test for significance
t <- wilcox.test(o, y)
# Get the results and add to the blank data frame
ls <- list("comp" = metric, "mean_old" = mean(o), "median_old" = median(o), "mean_young" =
mean(y), "median_young" = median(y), "pval" = t$p.value)
df <- rbind(df, ls)
}
# Save the complete statistics
assign("TNBC_distmetrics", df)
}
}
View(TNBC_distmetrics)
